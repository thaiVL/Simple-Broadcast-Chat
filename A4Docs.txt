Authors: Thai La (VTL932) and Ryan Lam (ryl062)

Structures
    server.c
        typdef struct info:
            Contains:
                - int socket;
                - struct sockaddr_storage peeraddr;
            Descrption:
                - This struct is used to store socket and address information of each client

Global Vairables
    server.c
        char* buff;
            - Buffer that stores the message sent by the sender client
        int rc;             
            - Number of receiver clients currently connected
        int rcServed;       
            - Number of receiver clients who had their messages received already
        pthread_mutex_t rcLock;      
            - Mutex lock for receiver clients related variables
        int turn;
            - Variable to determine a unique global turn ID
                - Used to ensure that each receiver client gets a turn to send their message
        pthread_mutex_t writeLock;
            - Mutex lock for sender clients, used to ensure that buff does not get overwritten by other sender clients, until all receivers get the message stored in buff
        pthread_cond_t hasMsg;
            - Condition variable for waking up threads, it will wait until all clients are fully served (received the message)

Functions
    server.c
        void* get_in_addr(struct sockaddr *sa):
            Parameters:
                - struct sockaddr *sa: Socket address pointer for the client
            Return:
                - Socket address
            Description:
                - This function is to retreive the socket addresss, which could be either IPv4 or IPv6

        void* sendClient(void* info):
            Parameters:
                - void* info: This is the client information that we will receive messages from sender client
                    - info contains the socket file descriptor of the peer as well as the peer's address
            Return:
                - NULL if connection to sender client is lost and when socket is closed
            Description:
                - This function will retreive a message from sender clients connected to the server. The client's IP, PORT, and message will be saved into a buffer, which will be sent to any receiver clients connected to the server.
                - Messages are retreived by using recv() on the sender clients socket address
                    - If the number of byte received is equal to zero, this indicates that the sender client has disconnected from the server and it will close the server socket to the sender and terminate the thread
                - In the function we utilize mutex locks and conditional variables to prevent the buffer from being overwritten from new messages
                    - The message will be recv() into a temp variable, once the writeLock is available, it is obtained by the thread and
                        write the temp content into the global buffer variable so that all receiver clients can read from it.
                    - The buffer will be locked until all clients have been served the intial message, then it will unlock for the next message

        void* senderCon():
            Parameters:
                - None
            Return:
                - No returns
            Description:
                - This function accepts/establishes the connection for new sender clients
                - Every new connection will create a new thread which uses the sendClient() function as a start routine
                    - This follows the thread-per-connection approach required
                - It will also store the sender clients information into the info data structure specified above

        void* recvClient(void* clientSock):
            Parameters:
                - void* clientSock: A void pointer to the client socket, to whom will receive receive messages from sender clients
            Return:
                - NULL if connection to reciever is lost and when socket is closed
            Description:
                - This function is designed to serve all connected clients the messages that have been sent by sender clients
                - Mutex locks and conditional variables are used in the function to ensure that all receive clients are fully served the current message once
                    - After all clients are served a message, then it will put the lock on wait, until it is signaled in sendClient()
                - Instances when a lock is released is when a receiver client disconnects, when a message is successfully sent, and when a receiver client has been served
                - Within the function we have counters to keep track of served clients

        void* receiverCon():
            Parameters:
                - None
            Return:
                - No returns
            Description:
                - This function accepts/establishes the connection for new receiver clients
                - Every new connection will create a new thread which uses the recvClient() function as a start routine
                    - This follows the thread-per-connection approach required
                - This will also increment the counter for how many receiver clients are connected to the server, for the purpose of ensure how many clients are needed to be served a message

        int main(void):
            Parameters:
                - None
            Return:
                - No returns
            Description:
                - The main function does all the initalizations and creations
                    - Initializes the mutex locks needed for sending and receiving clients
                    - Initializes buffer space for messages
                    - Create the two connection threads (one for sending clients and one for receiving clients)

    sender.c
        void* get_in_addr(struct sockaddr *sa):
            Parameters:
                - struct sockaddr *sa: Socket address pointer for the client
            Return:
                - Socket address
            Description:
                - This function is to retreive the socket addresss, which could be either IPv4 or IPv6
        
        void sendMsg(int sockfd):
            Parameters:
                - int sockfd: Socket address
            Return:
                - No returns
            Description:
                - This function is an infinite loop that prompts the sender client to send a message to the server
                - Messages are stored and sent to the server by passing the socket address and message through the send() function
                - The socket will close once the user is done with sending messages (exiting the server)

        int main(int argc, char *argv[]):
            Parameters:
                - int argc: Number of arguments passed into the program
                - char* argv[]: Array of pointers to array of character objects
            Return:
                - 1 if an error occurs getting the address information of the client
                - 2 if there client fails to connect to the server
            Description:
                - This is the main function that sends a connection request to the server
                - The connection request is sent through the PORT defined at the top of the file (PORT 36000 in this case)
                    - This PORT will also need to be defined inside server.c for the connection to work
                - After the connection has been established, the function sendMsg() will run, which will allow the client to send messages to the server
                - Address information will be freed when sender client exits the server

    receiver.c
        void* get_in_addr(struct sockaddr *sa):
            Parameters:
                - struct sockaddr *sa: Socket address pointer for the client
            Return:
                - Socket address
            Description:
                - This function is to retreive the socket addresss, which could be either IPv4 or IPv6

        int main(int argc, char *argv[]):
            Parameters:
                - int argc: Number of arguments passed into the program
                - char* argv[]: Array of pointers to array of character objects
            Return:
                - 0 if connection to the server is lost or when client exits
                - 1 if an error occurs getting the address information of the client
                - 2 if there client fails to connect to the server
            Description:
                - This is the main function that sends a connection request to the server
                - There is a infinite loop that listens to its socket address for messages
                    - It listens by using recv() in the loop, if there is a message sent through the socket address then it will save  it to the buffer and print to stdout for the client
                    - After printing it will reset the buffer, so new messages can be received appropriately
                
Limitations
    - Sender clients do not disconnect automatically when server is closed. Sender client will only disconnect and return back to console
        once it sent a message to the server and notice the server is disconnected, then the sender itself will disconnect and return to console.

HOW TO RUN
    - Type "make" in terminal
    - Type "server" to RUN
        - This will give you the server host in stdout
    - Run clients
        - For sender client, run the following:
            - Type "send", followed by server host. Ex) "send tux6"
        - For reciever client, run the following:
            - Type "recv" followed by server host. Ex) "recv tux6"
